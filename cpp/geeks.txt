You are given an array A of size N. You need to find all pairs in the array that sum to a number K. If no such pair exists then output will be -1. The elements of the array are distinct and are in sorted order.
https://practice.geeksforgeeks.org/
make -j1 -w -C common parobjs "JOBS=-j1"
make -j1 -w -C sysmon parobjs "JOBS=-j1"
gui-user --add --name sanjeev --password "tKb52NK@2" --type manager --role system-admin


all-parobjs = parobjs-common
parobjs-tools
parobjs-third_party
parobjs-transport
parobjs-sems
parobjs-ssyndi
parobjs-turncontroller
parobjs-si
parobjs-ssyndi
parobjs-keyvault


A directory is essentially a special-purpose database optimized to handle identity-related information.

unsigned int pairsWithMaxSum (int arr[], int n)
{
int highest=a[0]+a[1];
int count=1;

for (i=0; i<n; i++)
{
  if (i==0)
    j = i+2;
  else
    j = i+1;
	
  for (; j<n; i++)
  {
   //(i,j) pair is all possible pair out of an array
   pairSum = a[i]+a[j];
   if (pairSum > highest)
   {
    highest = pairSum;
    count=1;
   }
   else if (pairSum==highest)
   {
     count++;
   }
  
  }
}
}




typedef unsigned int Int;
void printPairs (Int a[], Int N, Int K);
int main()
{
 Int T, N, arr[10000000];
 Int i, K;
 scanf("%d", &T);
 
 for (; T>0; T--)
 {
	scanf("%d", &N);
	for(i=0; i<N; i++)
	{
	  scanf("%d", &arr[i]);
	}
	scanf("%d", &K);
	
	void printPairs (arr, N, K);//
 }
}

void printPairs (Int a[], Int N, Int K)
{
  Int i,j;
  int found=0;
 for (i=0; (a[i]<K && i<N-1); i++)
 {
   for (j=i+1; j<N; j++)
   {
     if (a[i]+a[j] > K)
	   break;
	 else if (a[i]+a[j] == K)
     {
	   found = printf("(%d,%d) ", a[i], a[j]);
	   break;
	 }
	}
  }

 if (!found)
   printf ("-1"); 
	 
}

void printPairs (unsigned int a[], unsigned int N, unsigned int K)
{
    int i=0, j=N-1;
    for (;i<j;)
    {
        if (a[i]+a[j]>K)
            j--;
        else if (a[i]+a[j]<K)
            i++;
        else
            found=printf("(%u %u %u)\n", a[i++],a[j--],K);
    }
}

void printNthTerm(int n)
{
    int i=1;
    unsigned long int terma = 7;
    for (;i<n; i++)
    {
        terma = (terma*2+i)%(1000000000+7);
    }
    printf("%lu\n", terma);
}